final FAILURE = '#FF0000'

def branchCodeName = 'focal'

def triggerOS() {
    if (params.OS_TRIGGER_BRANCH != 'NONE') {
	sh "${env.OS_TRIGGER}"
    }
}

pipeline {
    agent { label "UPSTREAM-20.04" }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '30', artifactNumToKeepStr: '2'))
        disableConcurrentBuilds()
    }

    parameters {
        string(defaultValue: '/scratch/www/local/ceph', description: 'Path to package repo server ' +
                'branch added automatically', name: 'WWW_ROOT')

        string(defaultValue: 'master', description: 'Trigger a vailOS build on the specfied branch after a ' +
                'sucessful ceph-ansible build; specify NONE to skip trigger',
                name: 'OS_TRIGGER_BRANCH')
    }

    environment {
	JAVA_HOME = "/usr/lib/jvm/java-11-openjdk-amd64"
	JAWT_INCLUDE_PATH = "/usr/lib/jvm/java-11-openjdk-amd64/include/jawt.h"

	// XXX: 
	// The target Ubuntu release is required for packaging.
	// If not set then the generated repo will be named $(lsb_release -sc)
	// which for most build machines is "bionic", but this branch is
	// targeted for "focal". See stage OSversion{}
	//
	def UBUNTU_CODENAME = sh(script: "lsb_release -sc", returnStdout: true).trim()
	def VERSION = sh(script: "git describe", returnStdout: true).trim()

        RELEASE_PREFIX = "ceph-${env.BRANCH_NAME}"
        RELEASE_NAME = "${env.RELEASE_PREFIX}-${VERSION}-${env.BUILD_NUMBER}"
	SPECTRA_INFO = "${env.RELEASE_NAME}.build"
	WORK_DIR = "/tmp/ceph_work/${env.BRANCH_NAME}"

	// The build deposits packages and repo under:
	BUILD_ARTIFACT_DIR = "${env.WORK_DIR}/Ubuntu"

	// Artifacts that comprise the apt repo relative to BUILD_ARTIFACT_DIR:
	ARTIFACT_LIST = "${UBUNTU_CODENAME} conf db dists pool ${env.SPECTRA_INFO}"

	// Distribute the generated repo to WWW_DIST_DIR
	// under a directory named WWW_DIST_REL_DIR
        WWW_DIST_DIR = "${params.WWW_ROOT}/${env.BRANCH_NAME}"
	WWW_DIST_REL_DIR = "${env.WWW_DIST_DIR}/${env.RELEASE_NAME}"
        WWW_TOKEEP = "11" // +1 actual number kept

        TRIGGER_USER = "spectra:11f97b22834dd601a1b7758c82e4233cc4"
        OS_TRIGGER="curl -X POST http://${env.TRIGGER_USER}@jenkins-master2.eng.sldomain.com/" +
            "job/SpectraLogic%20GitHub/job/vail_os/job/" +
            "${params.OS_TRIGGER_BRANCH}/buildWithParameters?BUILD_TRIGGER=Ceph-${env.BRANCH_NAME}"
    }
    stages {
        stage('Clean') {
            steps {
                sh "sudo rm -fr ${env.WORK_DIR}/*"
                sh "sudo git clean -xdf"
                sh "sudo mkdir -p ${env.WORK_DIR}/tmp"
                sh "sudo chmod -R 777 ${env.WORK_DIR}"
            }
        }
	
        stage('OSversion') {
            when {
                expression {
                   return '${UBUNTU_CODENAME}' == '${branchCodeName}'
                }
            }
            steps {
                    error "build machine running  '${UBUNTU_CODENAME}', but require '${branchCodeName}'"
            }
        }

        stage('Dependencies') {
            steps {
                sh "./install-deps.sh"
            }
        }

        stage('BuildCeph') {
            steps {
                sh "TMPDIR='${env.WORK_DIR}/tmp' JAVA_HOME='${env.JAVA_HOME}' " +
               "JAWT_INCLUDE_PATH='${JAWT_INCLUDE_PATH}' " +
                   "./make-debs.sh '${env.WORK_DIR}'"
            }
        }

        stage('BuildInfo') {
            steps {
                sh "./spectra-buildinfo.sh '${env.BUILD_ARTIFACT_DIR}/${env.SPECTRA_INFO}' '${env.BRANCH_NAME}' '${VERSION}' '${env.BUILD_NUMBER}' '${env.ARTIFACT_LIST}'"
            }
        }

        stage('Archive') {
            steps {
                sh "sudo mkdir -pm 777 ${env.WWW_DIST_DIR}/ || true"
                sh "sudo mkdir -m 777 ${env.WWW_DIST_REL_DIR}"
                sh "sudo tar -cf - -C ${env.BUILD_ARTIFACT_DIR} ${env.ARTIFACT_LIST} | tar -xvf - -C ${env.WWW_DIST_REL_DIR}"

                dir("${WWW_DIST_DIR}") {
                    sh "sudo rm -f latest*"
                    sh "sudo ln -s ${env.RELEASE_NAME} latest"
                    sh "sudo echo ${env.RELEASE_NAME} > latest.txt"
                    sh "sudo chmod 666 latest.txt"
                }
                sh "sudo rm -fr ${env.WWW_DIST_DIR}@tmp"
            }
        }

        stage('ReleasePrune') {
            steps {
                sh "sudo ls -1t ${env.WWW_DIST_DIR}/${env.RELEASE_PREFIX}* | tail -n +${env.WWW_TOKEEP} | xargs rm -fr"
            }
        }

        stage('PostClean') {
            steps {
                sh "sudo rm -fr ${env.WORK_DIR}"
            }
        }
    }

    post {
        success {
		triggerOS()
        }
    }
}
